generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  surname       String?
  username      String?   @unique
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  cart          Cart?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Author {
  id        String  @id @default(cuid())
  name      String  @unique
  surname   String  @unique
  image     String?
  biography String? @db.VarChar(1000)
  books     Book[]
}

model Book {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.VarChar(1000)
  image       String?
  type        BookType   @default(PAPERBACK)
  cost        Float      @default(0)
  author      Author     @relation(fields: [authorId], references: [id])
  authorId    String
  publisher   Publisher  @relation(fields: [publisherId], references: [id])
  publisherId String
  CartItem    CartItem[]
}

enum BookType {
  AUDIOBOOK
  PAPERBACK
  EBOOK
}

model Publisher {
  id        String  @id @default(cuid())
  name      String
  image     String?
  biography String? @db.VarChar(1000)
  books     Book[]
}

model Cart {
  id     String     @id @default(cuid())
  userId String     @unique
  items  CartItem[]
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CartItem {
  id       String @id @default(cuid())
  bookId   String
  quantity Int
  cartId   String
  book     Book   @relation(fields: [bookId], references: [id])
  cart     Cart   @relation(fields: [cartId], references: [id])
}
